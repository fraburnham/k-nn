<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1419988623801">{:repl-history {:ide [], :local [&quot;(frequencies '(1 1 1 2 2 1 2 2 1 1 1 1))&quot; &quot;(def f (frequencies '(1 1 1 2 2 1 2 2 1 1 1 1)))&quot; &quot;(keys f)&quot; &quot;(vals f)&quot; &quot;(sort-by vals f)&quot; &quot;(val {:a 1})&quot; &quot;(sort-by val f)&quot; &quot;(sort-by second f)&quot; &quot;(sort-by second &lt; f)&quot; &quot;(sort-by second &gt; f)&quot; &quot;(slurp \&quot;iris-data.csv\&quot;)&quot; &quot;(split (slurp \&quot;iris-data.csv\&quot;) #\&quot;\\n\&quot;)&quot; &quot;(string/split (slurp \&quot;iris-data.csv\&quot;) #\&quot;\\n\&quot;)&quot; &quot;(clojure.string/split (slurp \&quot;iris-data.csv\&quot;) #\&quot;\\n\&quot;)&quot; &quot;(map #(clojure.string/split % #\&quot;,\&quot;) (clojure.string/split (slurp \&quot;iris-data.csv\&quot;) #\&quot;\\n\&quot;))&quot; &quot;(def t (map #(clojure.string/split % #\&quot;,\&quot;) (clojure.string/split (slurp \&quot;iris-data.csv\&quot;) #\&quot;\\n\&quot;)))&quot; &quot;(map #{} '(1 2 3))&quot; &quot;(map #{1} '(1 2 3))&quot; &quot;(map #{%} '(1 2 3))&quot; &quot;(map #({%}) '(1 2 3))&quot; &quot;(map #{(keyword %) %} '(1 2 3))&quot; &quot;(map #({(keyword %) %}) '(1 2 3))&quot; &quot;(assoc {} :key 'val)&quot; &quot;(map #(assoc {} :features (drop-last %) :class (last %)) t)&quot; &quot;(map #(assoc {} \n             :features (Float/parseFloat (drop-last %)) \n             :class (Float/parseFloat (last %))) t)&quot; &quot;(map #(assoc {} \n             :features (Float/parseFloat (drop-last %)) \n             :class (map #(Float/parseFloat %) (last %))) t)&quot; &quot;(map #(assoc {} \n             :features (Float/parseFloat (drop-last %)) \n             :class (map #(Float/parseFloat %) (last %)) t))&quot; &quot;(map #(assoc {} \n             :features (Float/parseFloat (drop-last %)) \n             :class (last %)) t)&quot; &quot;(map #(assoc {} \n             :features (drop-last %) \n             :class (Integer/parseInt (last %))) t)&quot; &quot;(map #(assoc {} \n             :features (map #(Float/parseFloat %) (drop-last %)) \n             :class (Integer/parseInt (last %))) t)&quot; &quot;(map #(assoc {} \n             :features (map (fn [x] (Float/parseFloat x)) (drop-last %)) \n             :class (Integer/parseInt (last %))) t)&quot; &quot;(k-nn.core-test/trial)&quot;], :remote []}}</component>
</project>

