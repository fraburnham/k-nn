<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1425220442664">{:repl-history {:ide [], :local [&quot;(frequencies '(1 1 1 2 2 1 2 2 1 1 1 1))&quot; &quot;(def f (frequencies '(1 1 1 2 2 1 2 2 1 1 1 1)))&quot; &quot;(keys f)&quot; &quot;(vals f)&quot; &quot;(sort-by vals f)&quot; &quot;(val {:a 1})&quot; &quot;(sort-by val f)&quot; &quot;(sort-by second f)&quot; &quot;(sort-by second &lt; f)&quot; &quot;(sort-by second &gt; f)&quot; &quot;(slurp \&quot;iris-data.csv\&quot;)&quot; &quot;(split (slurp \&quot;iris-data.csv\&quot;) #\&quot;\\n\&quot;)&quot; &quot;(string/split (slurp \&quot;iris-data.csv\&quot;) #\&quot;\\n\&quot;)&quot; &quot;(clojure.string/split (slurp \&quot;iris-data.csv\&quot;) #\&quot;\\n\&quot;)&quot; &quot;(map #(clojure.string/split % #\&quot;,\&quot;) (clojure.string/split (slurp \&quot;iris-data.csv\&quot;) #\&quot;\\n\&quot;))&quot; &quot;(def t (map #(clojure.string/split % #\&quot;,\&quot;) (clojure.string/split (slurp \&quot;iris-data.csv\&quot;) #\&quot;\\n\&quot;)))&quot; &quot;(map #{} '(1 2 3))&quot; &quot;(map #{1} '(1 2 3))&quot; &quot;(map #{%} '(1 2 3))&quot; &quot;(map #({%}) '(1 2 3))&quot; &quot;(map #{(keyword %) %} '(1 2 3))&quot; &quot;(map #({(keyword %) %}) '(1 2 3))&quot; &quot;(assoc {} :key 'val)&quot; &quot;(map #(assoc {} :features (drop-last %) :class (last %)) t)&quot; &quot;(map #(assoc {} \n             :features (Float/parseFloat (drop-last %)) \n             :class (Float/parseFloat (last %))) t)&quot; &quot;(map #(assoc {} \n             :features (Float/parseFloat (drop-last %)) \n             :class (map #(Float/parseFloat %) (last %))) t)&quot; &quot;(map #(assoc {} \n             :features (Float/parseFloat (drop-last %)) \n             :class (map #(Float/parseFloat %) (last %)) t))&quot; &quot;(map #(assoc {} \n             :features (Float/parseFloat (drop-last %)) \n             :class (last %)) t)&quot; &quot;(map #(assoc {} \n             :features (drop-last %) \n             :class (Integer/parseInt (last %))) t)&quot; &quot;(map #(assoc {} \n             :features (map #(Float/parseFloat %) (drop-last %)) \n             :class (Integer/parseInt (last %))) t)&quot; &quot;(map #(assoc {} \n             :features (map (fn [x] (Float/parseFloat x)) (drop-last %)) \n             :class (Integer/parseInt (last %))) t)&quot; &quot;(k-nn.core-test/trial)&quot; &quot;(require '[clojure.string :as s])&quot; &quot;(defn format-csv-data [filename]\n  (map #(assoc {}\n               :features (map (fn [x] (Float/parseFloat x)) (drop-last %))\n               :class (Integer/parseInt (last %)))\n       (map #(s/split % #\&quot;,\&quot;)\n            (s/split (slurp filename) #\&quot;\\n\&quot;))))\n\n(defn trial []\n  (let [dataset (format-csv-data \&quot;iris-data.csv\&quot;)\n        tests (format-csv-data \&quot;iris-test-data.csv\&quot;)]\n    (println dataset)\n    (map (fn [test]\n           (println (classify 5 dataset (:features test)))\n           (println \&quot;Expected:\&quot; (:class test)))\n         tests)))\n&quot; &quot;(format-csv-data \&quot;iris-data.csv\&quot;)&quot; &quot;(defn trial []\n  (let [dataset (format-csv-data \&quot;iris-data.csv\&quot;)\n        tests (format-csv-data \&quot;iris-test-data.csv\&quot;)]\n    (map (fn [test]\n           (println (classify 5 dataset (:features test)))\n           (println \&quot;Expected:\&quot; (:class test)))\n         tests)))&quot; &quot;(trial)&quot; &quot;(test)&quot; &quot;(iris-test)&quot; &quot;(time (iris-test))&quot; &quot;(sq-diff-test)&quot; &quot;(euclidean-distance-test)&quot;], :remote []}}</component>
</project>

